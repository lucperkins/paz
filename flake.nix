# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.9)
{
  description = "Paz: an extensible PaaS";

  inputs = {
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";
    fenix.url = "https://flakehub.com/f/nix-community/fenix/0.1.1694.tar.gz";
    flake-compat.url = "https://flakehub.com/f/edolstra/flake-compat/*.tar.gz";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";
  };

  outputs = { self, ... }@inputs:
    let
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: inputs.nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import inputs.nixpkgs { inherit system; overlays = [ self.overlays.default ]; };
      });
    in
    {
      inherit (inputs.flake-schemas) schemas;

      overlays.default = final: prev:
        let
          inherit (final.hostPlatform) system;
        in
        {
          rustToolchain = with inputs.fenix.packages.${system};
            combine ((with stable; [
              cargo
              clippy
              rust-src
              rustc
              rustfmt
            ]) ++ inputs.nixpkgs.lib.optionals (system == "x86_64-linux") [
              targets.x86_64-unknown-linux-musl.stable.rust-std
            ] ++ inputs.nixpkgs.lib.optionals (system == "aarch64-linux") [
              targets.aarch64-unknown-linux-musl.stable.rust-std
            ]);
        };

      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          packages = with pkgs; [
            # Rust
            rustToolchain
            cargo-edit
            bacon
            rust-analyzer

            # Nix
            nixpkgs-fmt

            # Kubernetes
            kubectl
            kubectx
            minikube

            # Local dev
            process-compose
          ]
          ++ (pkgs.lib.optional pkgs.stdenv.isDarwin (with pkgs; [ libiconv ]
            ++ (with darwin.apple_sdk.frameworks; [ SystemConfiguration ])));

          env = {
            RUST_SRC_PATH = "${pkgs.rustToolchain}/lib/rustlib/src/rust/library";
          };
        };
      });
    };
}
